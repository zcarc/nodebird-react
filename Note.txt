
1. 노드 프로젝트 생성
	- ch1\front> npm init
	
	package name: react-nodebird-front
	version: enter
	~
	keyword: enter
	author: your name
	license: MIT
	yes
	
	
	npm init을 하면
	pakcage.json이 생성되는데 npm init을 사용하지 않고 직접 만들어도 상관 없다.
	
	
	
	ch1\front> npm i react react-dom next
	ch1\front> npm i -D nodemon webpack
	
	
	next: react 위에서 돌아가는 프레임워크
		  이걸 사용하는 이유는 코드 스플리팅과 서버사이드 렌더링에 필요하다.
			
			
			
	ch1\front> npm i -D eslint
	
	eslint: 사람마다 코딩스타일을 다르게해서 그 코딩 스타일 규칙을 정하는 라이브러리
	
	
	
	ch1\front> npm i -D eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks
	
	-D로 설치하면 package.json에서 devDependencies에 정의된다.
	devDependencies에 있는 패키지들은 개발할 때만 사용한다.
	
	dependencies에 넣어도 상관은 없는데 devDependencies에 넣는 것을 추천한다.



1-3. next 라우팅 시스템

        react는 page router를 많이 쓰는데
        next는 자체 router가 있어서 react router를 쓰지 않는다.
        그래서 더 간단하다.

        F:\node_bird\ch01\front> npm i -g next

        package.json
            "dev": "next" // 개발모드
            "build": "next build",
            "start": "next start" // 배포모드


        npm run dev를 하면 next가 호스팅을 알아서 해준다.
        이건 webpack-dev-server 와 비슷하다고 보면 된다.

        webpack-dev-server도 front react를 webpack으로 번들링 해주면서 서버로도 제공해준다.
        next도 그 역할을 모두 해준다.

        next는 js,jsx에서
        import React from 'react';를 하지 않아도 된다.


        pages 라는 폴더명을 만들고 거기에
        index.jsx를 만들면 기본 폴더가 pages 폴더라서 index.jsx가 출력된다.
        그래서 pages 폴더에 about.js를 만들고
        http://localhost:3000/about 이렇게 접속하면 about.jsx가 출력된다.
        pages 폴더가 주소체계를 표현해준다.



1-4.    1-4. ant design 적용하기

        node_bird\front> npm i antd

        실무에서는 ant design, bootstrap, semantic ui 가 많이 쓰인다.
        그대로 쓰지는 않고 커스터마이징해서 쓴다. 이유는 브랜드아이덴티티가 저해된다는 이유이다.
        그래서 외주 작업으로 어드민 페이지를 요구한다면 ant design으로 뚝딱 만들어버리면 된다.

        앤트 디자인으로 커버가 안되는 것들은 스타일드 컴포넌트를 사용한다.
        앤트 디자인을 사용할 때 커스터마이징을 스타일드 컴포넌트와 같이 할 수 있다.


        pages 폴더명은 고정이지만 components 폴더는 이름을 바꿔도 된다.
        next의 확장자는 js, jsx 둘 중 아무거나 사용해도 상관없다.
        그래서 "next convention"에 맞춰서 사용하면 된다.

        children이 props인데
        부모 컴포넌트에서 <AppLayout></AppLayout> 이런식으로 자식 컴포넌트를 불러오는데
        이 태그 안에 다른 태그들을 넣으면 그게 "children props"이다.


        앤트 디자인의 css를 불러오려면 next/head를 import하고 거기에 css 삽입하는 코드를 넣으면 된다.



1-5. 기본 페이지들 만들기

        index.js : main page
        profile.jsx : my profile page
        signup.jsx : sign up page

        <Link href="/profile"><a>프로필</a></Link>
        a 태그를 생략해도 동작하는데 문제는 없다.
        알아보니 a태그를 사용하지 않는것은 예전에 사용하던 방식이라 a태그를 사용해야한다.



1-7. 회원가입 state와 custom hook

        next가 webpack의 일부분들을 지원해준다.
        webpack이 최신문법에만 필요한게 아니라서 필요하기는 하다.

        useState는 함수, 반복문, 조건문에 넣지 않는게 좋은데
        커스텀 Hook에는 넣어도 된다.



2-1. _app.js로 레이아웃 분리하기

        원칙: props로 넘겨주는 함수는 useCallback 필수!
        useState가 변경될때마다 Input 태그가 넘겨주는 props 함수들이 다시 실행되서
        <Input name="user-password" type="password" value={password} required onChange={onChangePassword}></Input>
        name, type, value, onChange 모두 props 여기서 onChange는 함수인데 이 부분은 useState시 새로 생성되므로 useCallback을 사용해야한다.


        useCallback()의 두번째 인자 배열안에는 함수 내부에서 쓰는 state를 deps 배열로 넣는다.


        pages/_app.jsx 는 next에서 지정해놓은 레이아웃을 위한 파일명이다.
        _app.jsx의 props인 Component는 index.js, profile.jsx, signup.jsx의 "Component"이다.


        // 특정 부분만 골라서 최적화 하는 방법
        // 지나친 최적화도 별로 좋지 않다.
        const TextInput = memo(({ value, onChange }) => {
            return(
                <Input value={value} required onChange={onChange}></Input>
            );
        });


        기존 signup.jsx에는 render() 안에 <AppLayout /> 컴포넌트를 사용했었는데
        이렇게 되면 render()가 될 때마다 Layout를 렌더링 하므로  성능상에 문제가 있다.
        그래서 해당 컴포넌트들을 분리시켜야하는데 그러기 위해서 pages/_app.jsx를 생성한다. 이 파일명은 약속이다.



2-2. prop-types

        ch01\front> npm i prop-types

        // PropTypes.elementType: props에서 받은 컴포넌트
        NodeBird.propTypes = {
          Component: PropTypes.elementType,
        };


        _document.jsx : html, head, body
        _app.jsx : root (리액트 컴포넌트를 렌더링할 root)
        _error.jsx : 에러 발생 시 출력
        pages/ : 실제 컴포넌트

        _로 시작하는 위 3개 파일들은 기본적으로 next에 내장되어 있는데
        직접 커스터마이징하면 기존 파일을 덮어 씌울 수 있다.



2-3. antd 그리드 시스템

        backend, front 개발자가 서로 협업을 할 때
        API구조를 알아야 통신하는 방법을 알기 때문에 문서화를 잘해야 커뮤니케이션이 잘된다.


2-4. 커스텀 훅 재사용하기

        반복문 map()을 사용할 때 내부의 컴포넌트도 쪼개는게 좋다.
        
        const를 export할 때는 import 할때 비구조화 할당으로 가져와야한다.



2-6. 프로필 화면 만들기        

        최적화를 할 때 조건문, 반복문에 대한 컴포넌트를 분리해야한다.
        컴포넌트를 분리하는 쉬운 기준은 조건문, 반복문이다.        



2-7. 컴포넌트 분리하기

        form 태그는 안에 state가 있기 때문에 다른 부분도 렌더링이 되서
        따로 컴포넌트를 만들어 주는게 좋다.



3-1. Redux 주요 개념 소개

        Redux는 state의 역할을 하기 때문에 React의 State를 쓰지 않아도 된다.
        근데 보통은 둘 다 같이 쓰인다.        
        간단한 것은 React state
        복잡한 것은 Redux의 state를 주로 쓴다.

        Redux를 쓰는 이유: state 통제의 용이, 안정성

        store : state와 action, reducer가 다 합쳐진 개념

        Action: state를 바꾸는 행동
        Dispatch: Action을 실행
        Reducer: Action의 결과로 state를 어떻게 바꿀지 정의
        
        
        Redux는 Vue와 같은 다른 라이브러리에도 사용할 수 있고
        노드 같은 서버쪽 앱에도 사용할 수 있다.
        리덕스는 리액트와는 별개이고
        리액트에서 리덕스를 제일 많이 사용하기는 한다.



3-2. 첫 리듀서 만들기

        ch03/front> npm i redux react-redux

        redux: redux 기본 패키지
        react-redux: react와 redux를 연결해주는 패키지 (redux는 react와 아무런 관련이 없어서 연결해줘야한다.)


        ch03/front> npm i react react-dom next prop-types antd
        ch03/front> npm i -D eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks nodemon webpack


        리덕스의 단점은 코드량이 많아진다.
        하지만 예상치 못한 동작이 일어날 일은 없다.

        state 구조 잡는 건 경험이 많이 쌓여야 잘 잡을 수 있다.


        리덕스는 하나로 모아뒀다고 하지만 실제로 하나로 모으면
        너무 파일 하나가 너무 커지기 때문에 하나씩 쪼개는 것을 허용해준다.
        단, root store는 동일해야한다.



3-3. 불변성과 리듀서 여러 개 합치기

        combineReducers(): 흩어져 있는 reducer들을 합쳐주는 메서드
        


3-4. redux와 react 연결하기        

        Provider가 redux state를 제공해준다.

        store: state, action, reducer가 합쳐진 것

        Provider로 감싸주게 되면 해주면
        자식 컴포넌트들은 중앙 통제실의 state들을 전부 받는다.
        Provider가 제일 최상위 부모이다.
        <Provider store={store}> 


        react-redux와
        next-redux는 서로 다르다.

        next에서는
        ch03/front> npm i next-redux-wrapper 를 설치해줘야한다.


        // 이 부분의 store는 next-reducer-wrapper가 전달해준다.
        const NodeBird = ({ Component, store })

        export default withRedux((initialState, options) => {
        })(NodeBird);

        export할 때 withRedux()를 사용해서 store를 어떻게 넘겨줘야할지 작성해야한다.
        모든 프로젝트에서 위와 같이 사용하므로 이해가 안된다면 외우는게 좋다.

        action이 dispatch될 때 state를 어떻게 바꿔야할지 정의하는게
        reduce이고 이것들을 전부합쳐서 store로 만들고
        widthRedux()에서 store를 반환하면

        // 이 부분이 store를 받을 수 있다.
        const NodeBird = ({ Component, store })

        그리고 withRedux() 내부에서 store를 커스터마이징하는 경우도 있다.


        redux의 state들의 switch문에서 default가 없으면 에러가 발생하니 추가해줘야한다.

        
        switch문의 default는 실행될리가 없다고 보면 된다.
        이유는 정해진 action만 실행되기 때문에
        오타나 아무 행동도 안하는 경우가 아니면 default가 실행되지 않는다
        아무 행동도 안하는 경우는 단순히 로그를 띄울 때(로깅)가 있을 수 있다.
        
        reducer는 action이 실행되어야 실행되므로 실행되었을 때 default에 걸린다.
        그래서 action이 실행되면 무조건 새로운 state를 반환해줘야한다.

        action 하나당 새로운 state 하나씩 매칭해줘야한다.
        새로운 객체가 만들어지는게 원칙적으로 맞다.

        
        default: {
            return {
                ...state,
            };
        }

        default: {
            return state;
        }

        아무거나 써도 상관은 없지만 redux 원칙의 불변성을 따르는게 좋아서 첫번째 방법을 사용한다.

        

3-5. redux devtools 사용하기

        redux devtools(확장프로그램)을 사용하면
        어떤 action이 실행되서 state가 바뀌었는지 추적할 수 있다.
        그리고 역추적 time-machine도 할 수 있다.

        withRedux()에 middlewares를 추가해야하는데
        '미들웨어'라는것은 store에서 state,action,reducer 중간에 껴서 
        그 과정을 변조하거나 기능을 추가하는게 '미들웨어'이다.

        'redux'가 하는것은 단순히 state를 action과 reducer를 따라서 바꾸는 것이다.
        이것은 가장 기본적인 기능이고 redux에 없는 기능들을 추가하고 싶을 때 바로 미들웨어를 사용한다.

        크롬에서 redux 확장프로그램을 사용하는것도 원래 없는 기능인데 이를 하기 위해서
        withRedux()에 미들웨어를 사용해야한다.

        미들웨어는 action과 store 사이에서 동작한다.


        // 이 코드는 redux devtools 사이트에서 가져왔다.
        // redux devtools 확장프로그램을 깔게 되면 window 객체에 __REDUX_DEVTOOLS_EXTENSION__ 라는 함수가 생긴다.
        window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,

        // 기존 미들웨어들에 __REDUX_DEVTOOLS_EXTENSION__를 추가해서 '합성'한다는 의미이다.
        const enhancer = compose(
                applyMiddleware(...middlewares),
                window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,
        );

        // 아래 코드는 그냥 외우면 된다. 이유는 나중에 리덕스 사가를 사용하면
        window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,

        
        compose() : middleware 끼리 합성을 하게 만드는 함수
        applyMiddleware(...middlewares): middlewares = [미들웨어1, 미들웨어2 ...] 에 정의된 미들웨어들을 적용

        compose()로 "applyMiddleware(...middlewares)"와 "__REDUX_DEVTOOLS_EXTENSION__"를 합쳐준다.
        여기서 큰 틀은 그대로 유지하고 바뀌는 부분은 middlewares에 들어가는 미들웨어들만 거의 바뀐다.


        window is not defined 가 뜬다면 서버사이드 렌더링 시 서버에서 window를 이해할 수 없기 때문이다.


        // 서버사이드 렌더링인 경우 window 객체가 없다.
        // 이 코드 대신에 쓸 수 있는 코드가 있다.
        typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,

        // 아래코드로 대체가 가능하다.
        // options.isServer는 next에서 제공하는 속성이다.
        !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,


        
3-6. react-redux 훅 사용하기

        react-redux가 원래 hook을 지원안했다가 최근에 지원하기 시작했다.
        7.1 버전 이상이면 @next로 그 다음 버전을 설치할 필요가 없다.
        ch03/front> npm i react-redux@next
        @next는 현재 버전의 다음 버전이다 패키지 next와 연관이 없다.

        ...state : 점 3개가 있는 것을 스프레드 문법이라고 한다.


        react-redux에 hooks가 들어와서
        connect는 class component에만 쓰이고
        함수 component는 전부 hooks로 진행한다.
        hooks가 훨씬 더 편하다.


        useSelect() : 리액트 리덕스 Hooks

        // 전체 state에서 user의 state를 선택한다.
        const user = useSelector(state => state.user);


        아래 두 메서드 리액트 Hooks, 리덕스 Hooks 같은 의미라고 생각하면 된다.
        useState() == useSelector()
        setState() == useDispatch()



3-7. react-redux connect

        useSelector(), useDispatch()는 원래 하이오더 컴포넌트였다.

        react hooks가 없었을 때는 redux connect를 사용했었다.

        
        action은 state를 어떻게 바꿀지 정의하고
        dispatch는 reducer에게 action을 보낸다.
        그럼 reducer는 dispatch에게 전달받은 action을 실행해서 리덕스 state에 반영한다.

        
        useSelect()로 state를 가져오는 컴포넌트는
        가져온 state가 변경되면 해당 컴포넌트도 다시 re-rendering 된다.


        action에 넣을 데이터가 동적인 경우에는 action을 함수로 만들어야한다.

        Form 같은 태그들은 리덕스 안쓰고 리액트 state 쓴다. 
        리덕스는 서버와 통신할 데이터 or 여러 컴포넌트가 같이 쓰는 
        데이터들은 redux state를 쓰는게 좀 더 낫다.



4-1. 리덕스 사가의 필요성과 맛보기

        ch03/front> npm i redux-saga


        <제네레이터>

        1. 제네레이터의 장점은 무엇인가?
           - 함수 실행을 중간에 멈출 수 있고 원할 때 재개할 수 있어 편하다.

        2. 주로 어디에 쓰이는가?
           - 주로 무한의 개념을 표현할 때와 비동기 처리를 할 때 많이 사용한다.

        3. 어렵게 느껴진다면?
           - 사가도 패턴이 있어 패턴대로 하면 된다.


        takeLatest(): LOG_IN 액션이 dispatch() 되기를 기다려서
                      dispatch 될 때 login 제네레이터를 호출한다.


        리덕스는 기본적으로 동기식으로 동작하므로
        사가를 사용하면 비동기로 만들어준다.         

        
        call(): 함수 동기적 호출
        fork(): 함수 비동기적 호출
        put(): 액션 dispatch 동일



4-2. 사가 미들웨어 리덕스에 연결하기

        실제 서비스에서는 리덕스 확장프로그램을 허용하면 보안에 취약해지기 때문에 "_app.jsx" 에서 아래 부분은 삭제하고 배포한다.
        window.__REDUX_DEVTOOLS_EXTENSION__


        사가 미들웨어는 currying 기법을 사용하는데 인자 하나를 받아서 다른 함수를 리턴한다.
        제네레이터는 함수 실행을 중간에 멈출 수 있고 기존 컴포넌트에 props 같은 것을 추가할 때 쓴다.



4-3. ES2015 제너레이터

        
4-4. 사가의 제너레이터 이해하기

        take(): 해당 액션이 dispatch되면 제너레이터를 next하는 이펙트



4-5. 사가에서 반복문 제어하기


        take()를 이벤트 리스터라고 봐도 된다.

        이벤트 리스너를 여러개 등록하고 싶을 때는
        yield에 all()을 붙여주면 된다.

        리듀서와 리덕스 사가는 별개로 동작해서
        사가가 동작하지 않아도 리듀서는 동작한다.

        put()은 사가의 dispatch()라고 보면된다.

        takeEvery() : while(true){}와 같은 역할
        takeLatest() : 여러번 take 된 것의 마지막 것만 실행
                       이전 요청이 끝나지 않은게 있다면 이전 요청을 취소한다.

        둘중에 어떤걸 써야하는지 고민된다면
        여러번 요청 한 것에 대해서도 유효하게 인정한다면 takeEvery()
        마지막 것만 유효하게 인정한다면 takeLatest()



4-7. fork, call, 사가 총정리

        fork(), call()은 모두 함수를 실행해준다.
        사가에서는 함수 실행은 보통은 사가 이펙트인 fork(), call()로 많이 처리한다.

        fork()는 비동기 호출
        call()은 동기 호출

        예를 들어 call()에 들어간 함수가 서버에 요청을 보내는 함수라면
        서버에서 요청을 보내고 응답을 받을 때까지 기다린다.
        그리고 응답을 받았다면 call() 다음줄이 실행된다.

        만약 로그인을 요청을 보내는 함수가 있고 그 다음에
        로그인 성공 함수를 호출하는데
        로그인 요청 함수를 fork()로 실행한다면
        로그인이 되었다는 요청을 받기도 전에 그 다음줄인
        로그인 성공 함수가 호출되므로 문제가 되므로
        이런 상황같은 경우에는 call()을 사용해준다.

        코드 상의 실행 순서가 중요하지 않다면
        보통 for()를 사용하고 중요하다면 call()을 사용한다.

        그리고 리덕스 사가에서
        race. cancel, select, throttle, debounce 이펙트도 많이 쓰인다.



4-9. eslint-config-airbnb와 코드 정리

        ch05/front> npm i -D eslint-config-airbnb : 에어비앤비의 리액트 코딩 스타일
        ch05/front> npm i -D eslint-plugin-jsx-a11y : Accessibility 웹 접근성이라는 의미로 리액트는 html 태그를 포함하고 있기 때문에 장애인들을 위한 웹 접근성을 다 지켜서 코딩해야한다.

        eslint는 정규 문법 밖에 지원을 안한다.
        그래서 바벨 최신 문법을 사용한다면 babel-eslint를 설치해야한다.
        ch05/front> npm i -D babel-eslint



4-11. 로그인 리덕스 사이클

        ch05/front> npm i axios

        axios: 서버에 요청을 보내주는 모듈 (유명해서 많이 쓰이고 있다. 구글도 axios를 사용한다.)


        특정 컴포넌트 내부에 useSelector()가 호출되고 있는 상태에서
        가져온 그 리듀서가 변경된다면 해당 컴포넌트는 다시 render() 된다.
        호출한 컴포넌트가 아니라 다른 컴포넌트에서 가져온 리듀서가 변경된다 하더라도
        render()는 동일하게 된다.



4-13. 게시글 작성 리덕스 사이클

        리액트의 Single Page Application 같은 경우에는 <Form> 같은 것은 preventDefault()를 붙여줘야한다.
        그렇지 않으면 새 페이지로 넘어가게 된다.



4-14. next Router로 페이지 이동하기

        객체끼리 서로 비교하는게 서로 힘들기 때문에
        객체는 useEffect()에 안넣는게 좋다.
        그래서 객체 안의 id 또는 nickname을 넣는게 좋다.


4-16. 댓글 작성 리덕스 사이클

        immutable, immer 라는게 있어서 반복적인 reducers, sagas 부분을 해결해주는 라이브러리다.

        리액트와 제이쿼리는 웬만하면 같이 안쓰는게 좋다.



5-1. 백엔드 서버 구동에 필요한 모듈들

        http 모듈이 http 요청을 받아서 응답을 하는 서버 역할 제공
        기본 http 모듈로 하면 기능도 부족하고 가독성도 좋지 않아서
        리액트에 넥스트 프레임워크 올렸듯이
        노드 위에 백엔드용 서버 프레임워크를 하나 올린다.
        그게 바로 express 라는 모듈이다.

        ch05/back> npm i express
        ch05/back> npm i axios
        ch05/back> npm i bcrypt
        ch05/back> npm i cookie-parser
        ch05/back> npm i express-session
        ch05/back> npm i dotenv
        ch05/back> npm i cors
        ch05/back> npm i helmet hpp
        ch05/back> npm i morgan
        ch05/back> npm i multer
        ch05/back> npm i passport passport-local
        ch05/back> npm i mysql2
        ch05/back> npm i sequelize sequelize-cli
        ch05/back> npm i -D eslint eslint-config-airbnb
        ch05/back> npm i -D eslint-plugin-jsx-a11y
        ch05/back> npm i -D nodemon

        익스프레스가 제일 좋아서 유명한거는 아니고
        간단하면서도 우아하게 코딩할 수가 있다.

        bcrypt: 비밀번호 암호화 모듈
            * 설치 안될 경우: npm install -g windows-build-tools, npm install -g node-gyp
            * 참고: https://stackoverflow.com/questions/34546272/cannot-find-module-bcrypt/41878322

        cookie-parser: 로그인할 때 쿠키를 사용해서 필요
        express-session: 로그인할 때 쿠키와 함께 정보 저장하기 위한 세션
        dotenv: 비밀번호를 환경변수에 관리

        cors: 프론트, 백엔드 서버의 주소가 다른데
              서로 간의 요청을 보낼 때 보안상으로 제약이 걸리는데
              그 제약을 cors 모듈로 풀어준다.

        helmet, hpp: node와 express의 보안을 담당하는 모듈
        morgan: 서버에 로그를 기록 (ex: 요청과 응답에 대한 로그)
        multer: 이미지 업로드 시 사용

        passport, passport-local: 로그인 관리, 로그인이나 회원가입을
                                  쉽게 처리할 수 있도록 도와주는 모듈

        sequelize, sequelize-cli: mysql
        eslint, eslint-config-airbnb


        노드는 서버쪽 코드를 수정했을 때 자동으로 반영이 안된다.
        그래서 서버쪽 코드를 수정하면 재시작을 해줘야한다.
        근데 일일이 하기 번거러우니 nodemon이라고 있는데
        이 모듈이 서버쪽 코드를 감지해서 알아서 서버 코드를 반영해준다.
        nodemon: 서버 코드 수정 시 자동 반영

        실제 서버를 배포할 때는 서버가 재시작 되는 일은 별로 없는데
        개발할 때는 재시작이 빈번하니 nodemon을 사용한다.


        <nodemon.json>
            "watch": [여기에 들어가는 파일 및 폴더들이 수정되면 아래의 exec, ext가 실행된다.],
            "exec": "node index.js",
            "ext": "js json"


        "exec": "node index.js" : 서버를 실행하는게 아니고 파일을 실행하는데
                                  서버 시작하는 코드가 파일 안에 있다.


5-2. HTTP 요청 주소 체계 이해하기

        express: 서버를 구성해주는 프레임워크
                 express()를 불러오면 app이라는 객체가 생긴다.


        GET: 데이터를 가져온다.
        POST: 데이터를 생성한다.
        PUT: 데이터를 전체 수정한다.
        PATCH: 데이터를 부분 수정한다.
        DELETE: 데이터를 삭제 한다.


        http://localhost:8080
        http://localhost:8080/
        둘의 차이점은 마지막 슬래시의 유무인데 둘 다 같은 의미이다.



5-3. Sequelize와 ERD

        ch05/back> npm i -g sequelize-cli
        sequelize-cli를 명령어로 사용하기 위해서 -g를 붙인다.


        ch05/back> sequelize init
        이 명령어를 실행하면 sequelize가 DB 구성을 위한 파일들을 자동으로 만들어준다.


        back/config/config.json : DB 관련된 정보들을 입력한다. (ex: DB 계정 정보)

        back/models/index.js : back/config/config.json의 development 부분을 불러온다.
                               그리고 sequelize를 초기화 해준다.  (설정들을 적용)

        이런 과정들이 필요한 이유는  sql을 안쓰고 자바스크립트로 db를 컨트롤하기 위한 방법이다.


        back/models : 여기 직접 생성하는 파일들은 DB의 테이블 이라고 보면 된다.



5-5. 시퀄라이즈 Q&A와 DB 연결하기

        belongToMany() 메서드는 웬만하면 as 옵션을 추가해주는게 낫다.



5-6. 백엔드 서버 API 만들기

        한 파일의 코드가 100줄이 넘어가면 파일을 분리하는게 좋다.

        express에서 import나 export의 문법은 기본적으로 사용하지 못한다.
        그래서 프론트에서만 import export를 쓰고 서버에서는
        require()와 module.exports 를 사용한다.
        쓸 수 있기는 한데 해줘야 할 일이 많아져서 안쓰는게 좋다.



5-8. 실제 회원가입과 미들웨어들

        app.use()는 미들웨어라고 하는데
        미들웨어는 요청과 응답 사이에서 존재해서 데이터들을 변조한다.
        app.use(express.json()); 은 사실
        app.use('/', express.json());
        첫번째 인자가 생략되어 있다. "모든 요청에 대한 처리를 하겠다" 라는 의미이다.

        express를 사용하면 더 이상 body-parser가 필요 없다.



5-9. 로그인을 위한 미들웨어들

        사용자 정보는 서버의 세션에,
        프론트에는 세션을 조회할 수 있는 쿠키를 전달

        .env 파일은 github에 올리면 안된다.



5-10. passport와 쿠키, 세션 동작 원리

        로그인을 하면 사용자 DB에서 데이터를 조회해서
        데이터가 있는지 검사하는 것과 ID,PW가 맞는지 확인하고
        백엔드의 세션과 프론트의 쿠키 보내는 것과
        매번 누가 로그인 했는지 확인하는 작업을 모든 라우터에
        붙어줘야하기 때문에 이런것을 자동화 하기 위해서 passport를 사용한다. 이걸 사용하는게 안전하다.

        90%의 웹사이트는 쿠키, 세션으로 회원가입 하는게 맞고
        jwt를 쓰려면 정말 대규모여야한다.
        그렇지 않다면 이점보다 단점이 더 많다.
        그래서 잘못 쓰다가는 손해만 보는 인증 시스템이다.



5-11. passport 로그인 전략

        done()
            - 1번째 인자: 서버 에러
            - 2번째 인자: 성공
            - 3번째 인자: 로직상의 에러



5-12. passport 총정리와 실제 로그인

        passsport.serializeUser() : 로그인 할 때 한번만 호출
        passport.deserializeUser() : 매 요청 시 마다 호출



5-13. 다른 도메인간에 쿠키 주고받기

        로그인 응답 후에 네트워크 탭을 보면
        id, pw가 그대로 노출되는데 https를 사용하면 암호화가 된다.



폼 데이터는 요청 본문에 실려오기는 하는데 바디파서로 처리할 수 없어서
multer 라는 모듈을 사용해야한다.



6-14. 게시글 좋아요, 좋아요 취소

        - Icon 기본 테마는 outlined인데 색을 주고 싶으면 twoTone으로 바꾸면 된다.


6-16. 리트윗 프론트 화면 만들기

        - routes의 include 남용이 성능 저하의 원인


6-18. 6-18. 다른 리듀서 데이터 조작하기

        - 리덕스 사가 요청 자체는 비동기 처리라서

             case LOG_IN_REQUEST: {
                        return {
                            ...state,
                            isLoggingIn: true,
                            logInErrorReason: '',
                        };
                    }
          이런 요청이 들어왔다고 가정하면 일단 return을 먼저하고 비동기로 사가를 호출해서
          LOG_IN_REQUEST 요청이 있다면 호출해서 로직 상에 LOG_IN_SUCCESS 있으면 put 메소드로
          다시 리듀서를 호출해서 완료됐다면 다시 그 리듀서를 return 한다.


7-1. 서버 사이드 렌더링(SSR)

        - front/pages/user.js... User.getInitialProps는 백엔드, 프론트엔드에서 한번씩 실행된다.
          페이지를 처음 로딩할 때, 백엔드에서 실행,
          Next router로 페이지 전환될 때, 프론트에서 실행

          백엔드에서 getInitailProps가 실행될 때, 데이터를 받아올 수 있다.
          그러므로 여기서 axios 등을 사용할 수도 있는데,
          현재 프로젝트의 프론트 비동기 호출은 리덕스 사가로 구현되어 있어서 리덕스 사가를 여기서 호출해주면 된다.

          next를 안쓰면 이 부분이 엄청 복잡해진다.
          next가 getInitialProps 라이프 사이클을 만들었기 때문에 개발할 때 수월하게 진행할 수 있다.
          그래서 SSR App을 만들 때는 순수 리액트보다 next로 만드는것을 추천한다.
          어차피 getInitialProps는 구현해야하는데 next는 기본적으로 제공하기 해주고 있어서
          직접 구현하는 것 보다는 제공되는 것을 사용하는게 좋다.

          next-redux-saga 이 모듈이 있어야 next server에서 redux-saga를 사용할 수 있다.

          front/pages/index에 SSR을 적용했으니 새로고침할 때 마다 바로 게시글들이 로드된 상태로 바로바로 게시글들이 보이게 된다.

          getInitialProps가 한번은 서버쪽에서 실행되기 때문에 그때 서버에서 dispatch 부분을 가져오게 된다.

7-2. SSR을 위해 쿠키 넣어주기

        - getInitialProps는 pages에 있는 파일들에만 사용해야한다.
        - reducer의 initialState는 react의 state라고 보면 되고,
          switch, dispatch, action 부분은 react의 setState라고 보면 된다.
        - redux state와 component가 useSelector()로 연결되어 있어서 dispatch()하는 순간 component가 바뀐다.
          즉, useSelector()로 가져온 state가 dispatch 되어 성공적으로 return 하게 되면
          useSelector()로 연결된 모든 컴포넌트(함수)가 다시 호출된다.
          (컴포넌트 내에서 useSelector()로 받은 state를 사용하지 않더라도, useSelector() 존재 자체만으로 컴포넌트가 다시 실행된다.)


7-3. 리덕스 사가 액션 로깅하기

        - SSR을 적용해도 SPA가 유지된다.
          이유는 SSR는 처음에만 데이터를 넣어주는 거고,
          그 다음부터는 더 이상 관여를 하지 않고 SPA로 동작하게 된다.

        - 프론트에서 타고 들어가는거는 서버사이드 렌더링이 아니고
          프론트에서 getInitialProps가 호출되서 Loading이 되는거고
          페이지를 처음 접근할 때만 서버사이드 렌더링이다.


7-5. 회원가입 리다이렉션과 포스트 제거

        - 태그를 눌렀을 때 이동하는 링크는 CSR이고 SSR이 아니다.


7-10. immer로 불변성 쉽게 쓰기

        - 지우는거는 splice
        - 추가하는거는 unshift 또는 push
        - concat: forEach로 push
        - immer 말고 immuterble이라고 있는데 코드도 복잡하고 배워야할게 많아서
          추천하지는 않고 요즙에는 immer를 많이 사용하니 추천한다.
        - immer는 reducer에서만 쓰는게 아니라 불변성때문에 스프레드 문법을 사용하는곳에서는 모두 사용가능하다. setState 등등


7-11. 프론트 단에서 리덕스 액션 호출 막기

        - saga에서 throttle하는 것은 saga action에 대한 것만 throttle 하는 것이고
          redux action 이 실행되는 것은 막을 수 없어서 따로 설정을 해줘야한다.


7-12. 개별 포스트 불러오기

        - 링크를 보내면 이미지, 타이틀 내용이 자동적으로 출력되는데 이게 바로 메타 태그이다.
          각각 og: image, og: title, og: description


7-13. react-helmet으로 head 태그 조작하기

        - react-helmet이 head tag에 들어가는 meta, title, script, style 를 관리해준다.
        - og (open graph): 이것을 사용하는것이 표준이 되서 이걸 보고 검색엔진이 컨텐츠가 뭔지 알아낸다.
          그래서 og 태그나 scheme.org 이런것들의 도움이 없으면 웹사이트의 내용을 정확하게 파악하기 힘들다.
        - react-helmet 도 SSR를 따로 적용해야 검색엔진이 볼 수 있게 된다. postman을 사용해서 head tag를 보면
          브라우저에서 보는것과 달리 meta 태그들이 없는 것을 확인할 수 있다.
        - front/pages/_document.js : 기본적으로 next에서 제공하지만 react-helmet으로 SSR을 할 때는 이 파일을 직접 수정해줘야한다.


7-18. 폴더 구조와 _error.js

        - styled-components를 사용할 경우 폴더 구조
          아래와 같이 3가지가 있는데 폴더 구조는 정답이 없고 원하는대로 만들면 된다.
            1. front/components/ImagesZoom 폴더 밑에 index.js, style.js로 만드는 방법
            2. front/components/ImagesZoom.js, ImagesZoomStyle.js로 바로 밑에 파일을 만드는 방법
            3. front/components/style 폴더 밑에 스타일 관련 파일들만 따로 만드는 방법

        - front/containers 폴더 밑에 redux의 dispatch 하는 component들을 넣는다.
          dispatch가 없는 component는 front/components에 넣는다


8-2. next.config.js

        - next가 webpack, babel 들을 다 제공해서 그걸 사용했는데
          커스터마이징을 해야 패키지 간의 최적화를 할 수 있다.

        - front/next.config... config 에서 DefinePlugin 는
          process.env.NODE_ENV 와 같은 변수에 값을 넣어주거나 변수를 문자열로 대체하는 플러그인

          ReactLoadablePlugin: 코드 스플리팅
          NextJsRequireCacheHotReloader, HotModuleReplacementPlugin: 핫 리로더 (코드 수정 시 바로 반영되는 플러그인)