
1. 노드 프로젝트 생성
	- ch1\front> npm init
	
	package name: react-nodebird-front
	version: enter
	~
	keyword: enter
	author: your name
	license: MIT
	yes
	
	
	npm init을 하면
	pakcage.json이 생성되는데 npm init을 사용하지 않고 직접 만들어도 상관 없다.
	
	
	
	ch1\front> npm i react react-dom next
	ch1\front> npm i -D nodemon webpack
	
	
	next: react 위에서 돌아가는 프레임워크
		  이걸 사용하는 이유는 코드 스플리팅과 서버사이드 렌더링에 필요하다.
			
			
			
	ch1\front> npm i -D eslint
	
	eslint: 사람마다 코딩스타일을 다르게해서 그 코딩 스타일 규칙을 정하는 라이브러리
	
	
	
	ch1\front> npm i -D eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks
	
	-D로 설치하면 package.json에서 devDependencies에 정의된다.
	devDependencies에 있는 패키지들은 개발할 때만 사용한다.
	
	dependencies에 넣어도 상관은 없는데 devDependencies에 넣는 것을 추천한다.



1-3. next 라우팅 시스템
        리액트는 페이지 라우터를 많이 쓰는데
        넥스트는 자체 라우터가 있어서 리액트 라우터를 쓰지 않는다.
        그래서 더 간단하다.

        F:\node_bird\ch01\front> npm i -g next

        package.json
            "dev": "next" // 개발모드
            "build": "next build",
            "start": "next start" // 배포모드


        npm run dev를 하면 next가 호스팅을 알아서 해준다.
        이건 webpack-dev-server 와 비슷하다고 보면 된다.

        webpack-dev-server도 front react를 webpack으로 번들링 해주면서 서버로도 제공해준다.
        next도 그 역할을 모두 해준다.

        next는 js,jsx에서
        import React from 'react';를 하지 않아도 된다.


        pages 라는 폴더명을 만들고 거기에
        index.jsx를 만들면 기본 폴더가 pages 폴더라서 index.jsx가 출력된다.
        그래서 pages 폴더에 about.js를 만들고
        http://localhost:3000/about 이렇게 접속하면 about.jsx가 출력된다.
        pages 폴더가 주소체계를 표현해준다.

